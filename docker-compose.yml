version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: converteai-backend
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - PORT=5000
      - CORS_ORIGIN=http://localhost:3000
      - MAX_FILE_SIZE=10485760
      - RATE_LIMIT_WINDOW=900000
      - RATE_LIMIT_MAX=100
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - ./backend/src:/app/src
    networks:
      - converteai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: converteai-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_MAX_FILE_SIZE=10485760
      - GENERATE_SOURCEMAP=false
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    networks:
      - converteai-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: converteai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - converteai-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles:
      - production

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: converteai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - converteai-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    profiles:
      - production

  # File cleanup service
  cleanup:
    build:
      context: ./backend
      dockerfile: Dockerfile.cleanup
    container_name: converteai-cleanup
    volumes:
      - ./backend/uploads:/app/uploads
    networks:
      - converteai-network
    restart: unless-stopped
    profiles:
      - production

networks:
  converteai-network:
    driver: bridge

volumes:
  redis_data:
    driver: local

# Development override
---
# docker-compose.override.yml (for development)
version: '3.8'

services:
  backend:
    command: npm run dev
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development

  frontend:
    command: npm start
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true